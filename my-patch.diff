diff --git a/mock-oauth-server/server.js b/mock-oauth-server/server.js
index 3f61ec2..f1d55b4 100644
--- a/mock-oauth-server/server.js
+++ b/mock-oauth-server/server.js
@@ -2,7 +2,6 @@
 
 const express = require('express');
 const fs = require('fs');
-const rp = require('request-promise');
 const app = express();
 const https = require('https');
 const jwt = require('jsonwebtoken');
@@ -46,7 +45,7 @@ app.get('/authorize-failure', function (req, res) {
     res.redirect(302, resp);
 });
 
-const port = 30001;
+const port = parseInt(process.env.MOCK_OAUTH_SERVER_PORT,10) || 30001;
 
 const listner = https.createServer({
     key: fs.readFileSync(f('key.pem')),
diff --git a/src/OAuthIGSvc.js b/src/OAuthIGSvc.js
index 8d97739..ce77902 100644
--- a/src/OAuthIGSvc.js
+++ b/src/OAuthIGSvc.js
@@ -34,14 +34,14 @@
 
 /**
  * @callback setupTokenResolver - setupTokenResolver will be called with a single argument, a resolving function resolve.
- *                                the function should be called with the redirect location from GET requesting authUri. 
+ *                                the function should be called with the redirect location from GET requesting authUri.
  * @param {function} resolve - resolve the access_token containing redirect location by this function.
  */
 
 class OAuthIGService {
   /**
    * @constructor
-   * 
+   *
    * constructor create an OAuth implicit grant service. following arguments should be supplyed.
    * @param  {getStorage} getStorage  - see getStorage
    * @param  {setStorage} setStorage  - see setStorage
@@ -51,12 +51,12 @@ class OAuthIGService {
    * @param  {function=} logger  - default: console.log if dev environment set
    * @return {object} instance of OAuthIGService
    */
-  constructor(getStorage, setStorage, setupTokenResolver, requestFunc, config, logger, user) {
+  constructor(getStorage, setStorage, setupTokenResolver, requestFunc, config, logger) {
     var self = this;
     this.getStorage = getStorage;
     this.setStorage = setStorage;
-    this.setupTokenResolver = function (cb) { setupTokenResolver(cb) };
-    this.requestFunc = function (uri) { requestFunc(uri) };
+    this.setupTokenResolver = function (cb) { setupTokenResolver(cb); };
+    this.requestFunc = function (uri) { requestFunc(uri); };
     this.config = config;
     this.logger = logger || function () {
       var argz = Array.prototype.slice.call(arguments);
@@ -64,20 +64,20 @@ class OAuthIGService {
         .then((isDev) => {
           console.log.apply(console, argz);
 
-        });     
+        });
     };
 
-    this.logger("init oauthigservice");
+    this.logger('init oauthigservice');
   }
 
   /**
    * getToken - returns token to the user. may utilize the previous token in storage
    *          or order user to make get request to authorization server and resolve
-   *          redirect uri which contiais access token back to OAuthIGService.
+   *          redirect uri which contains access token back to OAuthIGService.
    * @return {Promise<token>} promise for token
    */
   getToken() {
-    this.logger("getting token");
+    this.logger('getting token');
     var self = this;
     return new Promise((resolve, reject) => {
       const cfg = this.config;
@@ -85,20 +85,20 @@ class OAuthIGService {
       // check if storage token exists
       this.getStorage(cfg.TC_OAUTH_TOKEN_KEY, null)
         .then((result) => {
-          log("lookup TC Token in storage");
+          log('lookup TC Token in storage');
           if (result) {
-            log("found TC token in storage", result);
+            log('found TC token in storage', result);
             // renew token if required.
             this.renew(result).then((result) => {
               this.setStorage(cfg.TC_OAUTH_TOKEN_KEY, result);
-              resolve(result)
+              resolve(result);
             }).catch(reject);
 
           } else {
-            log("no TC token in storage");
+            log('no TC token in storage');
             // token does not exist, initiate authorize routine
             this.authorize().then((result) => {
-              log("got TC token from redirect", result);
+              log('got TC token from redirect', result);
               this.setStorage(cfg.TC_OAUTH_TOKEN_KEY, result);
               resolve(result);
             }).catch(reject);
@@ -112,37 +112,37 @@ class OAuthIGService {
    * authorize - after authorize() is called,
    *             user is expected to actually do GET request using requestFunc
    *             and resolve the redirect location using setupTokenResolver
-   * @return {Promise<token>} 
+   * @return {Promise<token>}
    */
   authorize() {
     var self = this;
     return new Promise((resolve, reject) => {
       const resolver = (tokenUri) => {
         if (tokenUri) {
-          const resp = extractParamsFromURIFragment(tokenUri.split("#", 2)[1]);
+          const resp = extractParamsFromURIFragment(tokenUri.split('#', 2)[1]);
           self.logger('response from authorization endpoint: ', resp);
           if (resp.error) {
-            self.logger('error was in response, rejecting:', resp)
+            self.logger('error in response, rejecting:', resp);
             reject(resp);
           } else {
             const parsedJwt = jwt_decode(resp.access_token);
-            self.logger("successfully parsed a JWT: ", parsedJwt);
+            self.logger('successfully parsed a JWT: ', parsedJwt);
             parsedJwt.bearer = 'Bearer "' + resp.access_token + '"';
             resolve(parsedJwt);
-          } 
+          }
         } else {
-          self.logger("did not recieve any redirect location response");
-          reject({error: "Error"});
-        }             
-      }
+          self.logger('did not recieve any redirect location response');
+          reject({error: 'Error'});
+        }
+      };
 
       const cfg = this.config;
       const log = this.logger;
       this.setupTokenResolver(resolver);
 
       const getParams = [
-        this.getStorage(cfg.TC_OAUTH_URL_KEY,          cfg.DEFAULT_TC_OAUTH_URL),
-        this.getStorage(cfg.TC_OAUTH_CLIENT_ID_KEY,    cfg.DEFAULT_TC_OAUTH_CLIENT_ID),
+        this.getStorage(cfg.TC_OAUTH_URL_KEY, cfg.DEFAULT_TC_OAUTH_URL),
+        this.getStorage(cfg.TC_OAUTH_CLIENT_ID_KEY, cfg.DEFAULT_TC_OAUTH_CLIENT_ID),
         this.getStorage(cfg.TC_OAUTH_REDIRECT_URI_KEY, cfg.DEFAULT_TC_OAUTH_REDIRECT_URI)
       ];
 
@@ -150,7 +150,7 @@ class OAuthIGService {
         const authUri = params[0] + '?response_type=token&' +
                         'client_id=' + params[1] + '&redirect_uri=' +
                         encodeURIComponent(params[2]);
-        log("requesting TC Token", authUri);
+        log('requesting TC Token', authUri);
 
         this.requestFunc(authUri);
       });
@@ -167,16 +167,12 @@ class OAuthIGService {
     return new Promise((resolve, reject) => {
       let now = Math.floor(new Date().getTime() / 1000);
 
-      log("comparing now and exp: ", now, token.exp);
-      // now += 99999999999999999
-      // if (now < token.expires_at) {        
-
+      log('comparing now and exp: ', now, token.exp);
       if (token.exp > now) {
-        log("resolving token without renewal");
+        log('resolving token without renewal');
         resolve(token);
       } else {
-        // log(['now', now, 'expire', token.expires_at]);
-        log("renewal of current jwt needed");
+        log('renewal of current jwt needed');
         this.authorize().then((result) => {
           resolve(result);
         }).catch(reject);
@@ -189,17 +185,19 @@ class OAuthIGService {
  * extractParamsFromURIFragment - extract the URI fragment from the user agent's location object
  *                              reference https://dev.clever.com/instant-login/implicit-grant-flow
  * @param  {string} q - URI fragment to parse
- * @return {object}   
+ * @return {object}   - dictionary containing parsed keyvalue pairs from URI fragment
  */
 function extractParamsFromURIFragment(q) {
   const fragmentParams = {};
   var e,
-      a = /\+/g,  // Regex for replacing addition symbol with a space
-      r = /([^&;=]+)=?([^&;]*)/g,
-      d = function (s) { return decodeURIComponent(s.replace(a, " ")); };
+    a = /\+/g,  // Regex for replacing addition symbol with a space
+    r = /([^&;=]+)=?([^&;]*)/g, // Regex to extract {key}={value} pairs from URI frangment
+    d = function (s) { return decodeURIComponent(s.replace(a, ' ')); }; // decode extracted keyvalue pairs
 
-  while (e = r.exec(q)) {
+  e = r.exec(q);
+  while (e) { // run extraction untill nothing more can be extracted
     fragmentParams[d(e[1])] = d(e[2]);
+    e = r.exec(q);
   }
   return fragmentParams;
 }
@@ -211,4 +209,4 @@ if (typeof module !== 'undefined') {
 } else {
   window.OAuthIGService = OAuthIGService;
   window.extractParamsFromURIFragment = extractParamsFromURIFragment;
-}
\ No newline at end of file
+}
diff --git a/src/background.js b/src/background.js
index 3f18823..773cc60 100644
--- a/src/background.js
+++ b/src/background.js
@@ -2,6 +2,16 @@
  * Copyright (c) 2016 TopCoder, Inc. All rights reserved.
  */
 
+var ENVIRONMENT = 'glib::environment';
+var TC_OAUTH_URL_KEY = 'glib::tc_oauth_url';
+var TC_OAUTH_TOKEN_KEY = 'glib::tc_oauth_token';
+var TC_OAUTH_CLIENT_ID_KEY = 'glib::tc_oauth_client_id';
+var TC_OAUTH_REDIRECT_URI_KEY = 'glib::tc_oauth_redirect_uri';
+
+var DEFAULT_TC_OAUTH_CLIENT_ID = '99831715-8dff-4473-a794-dfc8e9755ce1';
+var DEFAULT_TC_OAUTH_REDIRECT_URI = 'https://kbdpmophclfhglceikdgbcoambjjgkgb.chromiumapp.org/oauth2';
+var DEFAULT_TC_OAUTH_URL = 'https://accounts.topcoder-dev.com/oauth';
+
 /**
  * Process oauth2 authentication
  * @param {String} clientId the client id
@@ -71,6 +81,12 @@ chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
   return true;
 });
 
+/**
+ * getChromeStorage get value from chrome storage
+ * @param  {string} key          key to lookup
+ * @param  {object} defaultValue default value if key is not in chrome stoarge
+ * @return {promise}              promise resolves to value looked up in chrome storage
+ */
 function getChromeStorage(key, defaultValue) {
   return new Promise((resolve) => {
     chrome.storage.local.get(key, (obj) => {
@@ -80,6 +96,11 @@ function getChromeStorage(key, defaultValue) {
   });
 }
 
+/**
+ * setChromeStorage  set value in chrome storage
+ * @param {string} key   key to set in chrmoe stoarge
+ * @param {object} value value to set
+ */
 function setChromeStorage(key, value) {
   const obj = {};
   obj[key] = value;
@@ -91,70 +112,70 @@ function setChromeStorage(key, value) {
  */
 class ChromeOAuthIGUser {
   /**
-   * @constructor 
+   * @constructor
    *   - actual user of OAuthIGService.
    *   - ChromeOAuthIGUser should send the GET request to the authorization server using requestFunc
-   *   - ChromeOAuthIGUser should resolve the redirect response from above request using setupTokenResolver   
+   *   - ChromeOAuthIGUser should resolve the redirect response from above request using setupTokenResolver
    * @param  {function=} logger optional logger
    * @return {object}    an OAuthIGUser that binds to chrome events to handle access_tokens
    */
-  constructor (logger) {
+  constructor(logger) {
     const self = this;
 
-    this.logger = logger || (function (...argz) {
+    this.logger = logger || function (...argz) {
       getChromeStorage(ENVIRONMENT, false)
         .then((isDev) => {
           isDev && console.log.apply(console, argz);
-        });      
-      });
+        });
+    };
 
     // acutal message handler that responds to token requests from content_script.js
     chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
       if (request.oAuthIG) {
-        self.logger("TC OAuth token request from content_script");    
+        self.logger('TC OAuth token request from content_script');
         oAuthIGSvc.getToken()
           .then((token) => {
-            self.logger("sending token to content_script, ", token);
+            self.logger('sending token to content_script, ', token);
             sendResponse({oAuthIGResult: {
               jwt: token
             }});
           })
           .catch((resp) => {
-            self.logger("service failed to provide token: ", resp);
+            self.logger('service failed to provide token: ', resp);
             sendResponse({oAuthIGResult: {
               error: resp
             }});
           });
       }
-    });            
-  } 
+    });
+  }
 
   /**
    * setupTokenResolver keep the resolver in this._resolve
    * @param  {function} resolve - function used to resolve the redirect location to OAuthIGService
    */
-  setupTokenResolver (resolve) {
+  setupTokenResolver(resolve) {
     this._resolve = resolve;
   }
 
   /**
    * requestFunc sends actual GET request to oauth authorization endpoint.
    *             uses chrome.identity.launchWebAuthFlow without interaction.
-   * @param  {string} authUri authorization server uri passed from OAuthIGSerivce 
+   * @param  {string} authUri authorization server uri passed from OAuthIGSerivce
    */
-  requestFunc (authUri) {
+  requestFunc(authUri) {
     var self = this;
     chrome.identity.launchWebAuthFlow({
       url: authUri,
       interactive: true
-    }, self.resolve.bind(self) );
+    }, self.resolve.bind(self));
   }
 
   /**
    * resolve resolves redirect uri which contains access token to OAuthIGService
    * @param  {string} respUri redirect uri containing access token
    */
-  resolve (respUri) {
+  resolve(respUri) {
     this._resolve(respUri);
   }
 
@@ -173,8 +194,8 @@ const oAuthCfg = {
 
 const oAuthIGUser = new ChromeOAuthIGUser();
 const oAuthIGSvc = new OAuthIGService(getChromeStorage, setChromeStorage,
-                  oAuthIGUser.setupTokenResolver.bind(oAuthIGUser), 
-                  oAuthIGUser.requestFunc.bind(oAuthIGUser), 
+                  oAuthIGUser.setupTokenResolver.bind(oAuthIGUser),
+                  oAuthIGUser.requestFunc.bind(oAuthIGUser),
                   oAuthCfg);
 
 
diff --git a/src/config.js b/src/config.js
index 31f5dbf..d5af6be 100644
--- a/src/config.js
+++ b/src/config.js
@@ -34,26 +34,26 @@ var DOMAIN_KEY_GITHUB = 'glib::github_domain';
 var DOMAIN_KEY_GITLAB = 'glib::gitlab_domain';
 var DOMAIN_KEY_JIRA = 'glib::jira_domain';
 
-var TC_OAUTH_URL_KEY = "glib::tc_oauth_url";
-var TC_OAUTH_TOKEN_KEY = "glib::tc_oauth_token";
-var TC_OAUTH_CLIENT_ID_KEY = "glib::tc_oauth_client_id";
-var TC_OAUTH_REDIRECT_URI_KEY = "glib::tc_oauth_redirect_uri";
+var TC_OAUTH_URL_KEY = 'glib::tc_oauth_url';
+var TC_OAUTH_TOKEN_KEY = 'glib::tc_oauth_token';
+var TC_OAUTH_CLIENT_ID_KEY = 'glib::tc_oauth_client_id';
+var TC_OAUTH_REDIRECT_URI_KEY = 'glib::tc_oauth_redirect_uri';
 
-var DEFAULT_TC_OAUTH_CLIENT_ID = "99831715-8dff-4473-a794-dfc8e9755ce1";
-var DEFAULT_TC_OAUTH_REDIRECT_URI = "https://kbdpmophclfhglceikdgbcoambjjgkgb.chromiumapp.org/oauth2";
-var DEFAULT_TC_OAUTH_URL = "https://accounts.topcoder-dev.com/oauth";
+var DEFAULT_TC_OAUTH_CLIENT_ID = '99831715-8dff-4473-a794-dfc8e9755ce1';
+var DEFAULT_TC_OAUTH_REDIRECT_URI = 'https://kbdpmophclfhglceikdgbcoambjjgkgb.chromiumapp.org/oauth2';
+var DEFAULT_TC_OAUTH_URL = 'https://accounts.topcoder-dev.com/oauth';
 
 var ENVIRONMENT = 'glib::environment';
 
 if (typeof module !== 'undefined') {
-    module.exports =  {
-      TC_OAUTH_TOKEN_KEY,
-      TC_OAUTH_URL_KEY,
-      TC_OAUTH_REDIRECT_URI_KEY,
-      TC_OAUTH_CLIENT_ID_KEY,
-      DEFAULT_TC_OAUTH_URL,
-      DEFAULT_TC_OAUTH_REDIRECT_URI,
-      DEFAULT_TC_OAUTH_CLIENT_ID,
-      ENVIRONMENT
-    };
-}
\ No newline at end of file
+  module.exports = {
+    TC_OAUTH_TOKEN_KEY,
+    TC_OAUTH_URL_KEY,
+    TC_OAUTH_REDIRECT_URI_KEY,
+    TC_OAUTH_CLIENT_ID_KEY,
+    DEFAULT_TC_OAUTH_URL,
+    DEFAULT_TC_OAUTH_REDIRECT_URI,
+    DEFAULT_TC_OAUTH_CLIENT_ID,
+    ENVIRONMENT
+  };
+}
diff --git a/src/content_script.js b/src/content_script.js
index ddc56c2..7f288a4 100644
--- a/src/content_script.js
+++ b/src/content_script.js
@@ -143,9 +143,13 @@ function injectButton() {
   }
 }
 
+/**
+ * callSvcForToken function to demonstarge implicit grant for Topcoder Challenge
+ * @param  {Function} cb callback to execute after token retrieval
+ */
 function callSvcForToken(cb) {
-  console.log("requesting an access token using OAuth implicit grant from service");
-  chrome.runtime.sendMessage({oAuthIG : true}, function (result)  {
+  console.log('requesting an access token using OAuth implicit grant from service');
+  chrome.runtime.sendMessage({oAuthIG: true}, function (result) {
     if (!result.oAuthIGResult.error) {
       setChromeStorage(TOKEN_KEY_TOPCODER, result.oAuthIGResult.jwt);
       var _display = {};
@@ -154,12 +158,12 @@ function callSvcForToken(cb) {
           _display[i] = result.oAuthIGResult.jwt[i];
         }
       }
-      alert("received jwt from OAuth implicit grant: \n" + JSON.stringify(_display, null, 2));    
-      console.log("received jwt from OAuth implicit grant: ", result.oAuthIGResult.jwt);
+      alert('received jwt from OAuth implicit grant: \n' + JSON.stringify(_display, null, 2));
+      console.log('received jwt from OAuth implicit grant: ', result.oAuthIGResult.jwt);
       // callback();
     } else {
-      alert("got error, not jwt: \n" + JSON.stringify(result.oAuthIGResult.error, null, 2));
-      console.log("got error, not jwt: ", result.oAuthIGResult.error);
+      alert('got error, not jwt: \n' + JSON.stringify(result.oAuthIGResult.error, null, 2));
+      console.log('got error, not jwt: ', result.oAuthIGResult.error);
     }
     cb();
   });
diff --git a/src/options.js b/src/options.js
index 188cd4a..3e1e71b 100644
--- a/src/options.js
+++ b/src/options.js
@@ -18,6 +18,14 @@ var ENVIRONMENT = 'glib::environment';
 var DOMAIN_REGEX = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/i;
 var VALIDATE_TIMEOUT = 1000; // show validation error 1s after key up
 
+var TC_OAUTH_URL_KEY = 'glib::tc_oauth_url';
+var TC_OAUTH_TOKEN_KEY = 'glib::tc_oauth_token';
+var TC_OAUTH_CLIENT_ID_KEY = 'glib::tc_oauth_client_id';
+var TC_OAUTH_REDIRECT_URI_KEY = 'glib::tc_oauth_redirect_uri';
+
+var DEFAULT_TC_OAUTH_CLIENT_ID = '99831715-8dff-4473-a794-dfc8e9755ce1';
+var DEFAULT_TC_OAUTH_REDIRECT_URI = 'https://kbdpmophclfhglceikdgbcoambjjgkgb.chromiumapp.org/oauth2';
+var DEFAULT_TC_OAUTH_URL = 'https://accounts.topcoder-dev.com/oauth';
 /**
  * Set the value in Chrome Storage
  */
